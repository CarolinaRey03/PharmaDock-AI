import logging
import os
from typing import Dict, List

from dotenv import load_dotenv
from openai import OpenAI


def _get_api_key() -> str:
    """
    Loads and retrieves the OpenAI API key from environment variables.
    """
    load_dotenv(".config/config.env")
    api_key = os.getenv("OPENAI_API_KEY")
    return api_key


def generate_chatbot_response(conversation: List[Dict[str, str]]) -> Dict[str, str]:
    """
    Generates a response from OpenAI based on the conversation history.
    """
    try:
        api_key = _get_api_key()
        client = OpenAI(api_key=api_key)
        logger = logging.getLogger("chatbot_logger")

        response = client.chat.completions.create(
            model="gpt-4o",
            messages=conversation,
            temperature=0.2,
            max_tokens=1000,
            top_p=0.0,
            frequency_penalty=0,
            presence_penalty=0,
        )

        chat_response_content = response.choices[0].message.content

        chat_response = {"role": "assistant", "content": chat_response_content}
        logger.debug("Response generated by the chatbot: %s", chat_response)

        return chat_response

    except Exception as e:
        logger.error(
            "Error while generating the response. Conversation: %s\nError: %s\n",
            conversation,
            e,
        )
        return {"error": f"Error while generating the response: {str(e)}"}
